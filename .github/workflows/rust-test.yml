name: Test

on:
  workflow_call:
    inputs:
      toolchain:
        description: "Rust toolchain specification as JSON array -- see https://rust-lang.github.io/rustup/concepts/toolchains.html#toolchain-specification"
        required: false
        default: '["stable", "beta"]'
        type: string
      features:
        description: "Rust features as JSON array -- see https://doc.rust-lang.org/cargo/reference/features.html#the-features-section"
        required: false
        default: '[""]'
        type: string
    secrets:
      CODECOV_TOKEN:
        description: "Token for Codecov"
        required: true

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  build-grcov:
    name: "Build grcov"
    runs-on: ubuntu-latest
    steps:
      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          key: grcov
          path: ~/.cargo/bin/grcov
      - name: Install Rust toolchain
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: dtolnay/rust-toolchain@stable
      - name: Build
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: cargo install grcov
  build-nextest:
    name: "Build nextest"
    runs-on: ubuntu-latest
    steps:
      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          key: nextest
          path: ~/.cargo/bin/cargo-nextest
      - name: Install Rust toolchain
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: dtolnay/rust-toolchain@stable
      - name: Build
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin
  test:
    needs:
      - build-grcov
      - build-nextest
    name: "Test Rust ${{ matrix.rust-toolchain }}, features ${{ matrix.features }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-toolchain: ${{ fromJson(inputs.toolchain) }}
        features: ${{ fromJson(inputs.features) }}
      fail-fast: false
    steps:
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust-toolchain }}
          components: llvm-tools-preview
      - name: Get cached nextest
        uses: actions/cache@v4
        with:
          key: nextest
          path: ~/.cargo/bin/cargo-nextest
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          key: build-cargo-deps-${{ matrix.rust-toolchain }}-${{ matrix.features }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}
          path: target
          restore-keys: |
            build-cargo-deps-${{ matrix.rust-toolchain }}-${{ matrix.features }}-
            build-cargo-deps-${{ matrix.rust-toolchain }}-
            build-cargo-deps-
      - name: Test
        run: cargo nextest run --all --features '${{ matrix.features }}'
        env:
          RUSTFLAGS: "-C instrument-coverage"
          LLVM_PROFILE_FILE: "report-%p-%m.profraw"
      - name: Get cached grcov
        uses: actions/cache@v4
        with:
          key: grcov
          path: ~/.cargo/bin/grcov
      - name: Name of coverage file (part 1)
        run: echo cov_id='${{ matrix.rust-toolchain }}' >> $GITHUB_ENV
      - name: Name of coverage file (part 2)
        if: ${{ matrix.features }}
        run: echo cov_id="$cov_id"-'${{ matrix.features }}' >> $GITHUB_ENV
      - name: Name of coverage file
        id: coverage-name
        run: echo cov_id="$cov_id" >> "$GITHUB_OUTPUT"
      - name: Convert coverage
        run: |
          mkdir -p target/coverage
          grcov . --binary-path target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore '../**' --ignore '/*' -o "target/coverage/${{ steps.coverage-name.outputs.cov_id }}.lcov"
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ steps.coverage-name.outputs.cov_id }}
          path: target/coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: ${{ env.CODECOV_TOKEN != '' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}
  check-fmt:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Check code formatting
        run: cargo fmt --all --check
  check-clippy:
    name: Check code using Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Check code using Clippy
        run: cargo clippy --all --all-features -- -D warnings
